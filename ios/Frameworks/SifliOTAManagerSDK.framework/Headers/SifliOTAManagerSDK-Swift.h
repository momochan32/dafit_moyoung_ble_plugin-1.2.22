#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef SIFLIOTAMANAGERSDK_SWIFT_H
#define SIFLIOTAMANAGERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SifliOTAManagerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, BleCoreManagerState, open) {
  BleCoreManagerStateUnknown = 0,
  BleCoreManagerStateResetting = 1,
  BleCoreManagerStateUnsupported = 2,
  BleCoreManagerStateUnauthorized = 3,
  BleCoreManagerStatePoweredOff = 4,
  BleCoreManagerStatePoweredOn = 5,
};




typedef SWIFT_ENUM(uint16_t, NandImageID, open) {
  NandImageIDHCPU = 0,
  NandImageIDLCPU = 1,
  NandImageIDPATCH = 2,
  NandImageIDRES = 3,
  NandImageIDLCPU_PATCH = 4,
  NandImageIDDYN = 5,
  NandImageIDMUSIC = 6,
};

typedef SWIFT_ENUM(uint8_t, NorImageID, open) {
  NorImageIDHCPU = 0,
  NorImageIDLCPU = 1,
  NorImageIDPATCH = 2,
  NorImageIDRES = 3,
  NorImageIDFONT_OR_MAX = 4,
  NorImageIDEX = 5,
  NorImageIDOTA_MANAGER = 6,
  NorImageIDTINY_FONT = 7,
  NorImageIDNONE = 0xff,
};

typedef SWIFT_ENUM(NSInteger, NorV1TriggerMode, open) {
/// 普通模式
  NorV1TriggerModeNormal = 0,
/// 强制启动
  NorV1TriggerModeForce = 1,
/// 续传
  NorV1TriggerModeResume = 2,
};

@class NSNumber;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK14QBleLogManager")
@interface QBleLogManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QBleLogManager * _Nonnull share;)
+ (QBleLogManager * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
/// SDK内部日志开关。当关闭时，控制台不再打印内容，但QBleLogManagerDelegate的回调不受影响。
@property (nonatomic) BOOL openLog;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@class NSString;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK19SFNandImageFileInfo")
@interface SFNandImageFileInfo : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull path;
@property (nonatomic, readonly) enum NandImageID imageID;
- (nonnull instancetype)initWithPath:(NSURL * _Nonnull)path imageID:(enum NandImageID)imageID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SifliOTAManagerSDK18SFNorImageFileInfo")
@interface SFNorImageFileInfo : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull path;
@property (nonatomic, readonly) enum NorImageID imageID;
- (nonnull instancetype)initWithPath:(NSURL * _Nonnull)path imageID:(enum NorImageID)imageID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SFOTAErrorType : NSInteger;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK10SFOTAError")
@interface SFOTAError : NSObject
@property (nonatomic, readonly) enum SFOTAErrorType errorType;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorDes;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SFOTAErrorType, open) {
  SFOTAErrorTypeUnknown = 0,
  SFOTAErrorTypeConnectTimeout = 1,
  SFOTAErrorTypeConnectionCanceled = 2,
  SFOTAErrorTypeDisconnected = 3,
  SFOTAErrorTypeFailedToConnect = 4,
  SFOTAErrorTypeGeneral = 5,
  SFOTAErrorTypeSearchTimeout = 6,
  SFOTAErrorTypeRequestTimeout = 7,
  SFOTAErrorTypeLoadResourceZipFailed = 8,
  SFOTAErrorTypeLoadControlFileFailed = 9,
  SFOTAErrorTypeLoadImageFileFailed = 10,
  SFOTAErrorTypeErrorCodeFromDevice = 11,
  SFOTAErrorTypeInsufficientBytes = 12,
  SFOTAErrorTypeUnavailableBleStatus = 13,
  SFOTAErrorTypeInvalidParams = 14,
};


SWIFT_CLASS("_TtC18SifliOTAManagerSDK15SFOTALogManager")
@interface SFOTALogManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFOTALogManager * _Nonnull share;)
+ (SFOTALogManager * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL logEnable;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SFOTAManagerDelegate;
enum SFOTAType : NSInteger;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK12SFOTAManager")
@interface SFOTAManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SDKVersion;)
+ (NSString * _Nonnull)SDKVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFOTAManager * _Nonnull share;)
+ (SFOTAManager * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <SFOTAManagerDelegate> _Nullable delegate;
/// 搜索目标外设时的超时时间(秒)，默认20秒
@property (nonatomic) NSInteger searchingTimeout;
- (void)logTest;
/// 当前蓝牙状态
@property (nonatomic, readonly) enum BleCoreManagerState bleState;
/// true-当前manager正在执行其它任务，开始新的OTA流程的行为会被忽略。false-处于空闲状态
@property (nonatomic, readonly) BOOL isBusy;
/// 当前正在执行的OTA类型。none表示当前没有OTA流程
@property (nonatomic, readonly) enum SFOTAType otaType;
/// 开启NAND升级
/// \param targetDeviceIdentifier 目标设备的identifier字符串。通过CBPeripheral.identifier.uuidString获取
///
/// \param resourceZipPath zip格式的资源文件本地路径。为nil表示本次升级不涉及资源文件
///
/// \param controlImageFilePath 与Image升级文件对应的control文件的本地路径。
///
/// \param imageFileInfos Image文件本地地址与类型信息。如果controlImageFilePath为nil则忽略该参数
///
/// \param tryResume 是否尝试启用续传功能。
///
/// \param 发送Image部分时，设备的回复频率。默认4（即SDK发送20包数据，设备进行一次回复），数值越大理论上速度越快，但超过设备的处理能力反而会因为重发而降低整体的发送速度，因此该值需要依据具体的设备性能而定。 
///
- (void)startOTANandWithTargetDeviceIdentifier:(NSString * _Nonnull)targetDeviceIdentifier resourceZipPath:(NSURL * _Nullable)resourceZipPath controlImageFilePath:(NSURL * _Nullable)controlImageFilePath imageFileInfos:(NSArray<SFNandImageFileInfo *> * _Nonnull)imageFileInfos tryResume:(BOOL)tryResume imageResponseFrequnecy:(uint8_t)imageResponseFrequnecy;
/// 开启NorV2升级
/// \param targetDeviceIdentifier 目标设备的identifier字符串。通过CBPeripheral.identifier.uuidString获取
///
/// \param controlImageFilePath 与Image升级文件对应的control文件的本地路径。
///
/// \param imageFileInfos image文件信息列表。包含image文件本地路径以及image文件类型。
///
/// \param tryResume 是否尝试启用续传功能。
///
/// \param 发送Image时，设备的回复频率。默认20（即SDK发送20包数据，设备进行一次回复），数值越大理论上速度越快，但超过设备的处理能力反而会因为重发而降低整体的发送速度，因此该值需要依据具体的设备性能而定。 
///
- (void)startOTANorV2WithTargetDeviceIdentifier:(NSString * _Nonnull)targetDeviceIdentifier controlImageFilePath:(NSURL * _Nonnull)controlImageFilePath imageFileInfos:(NSArray<SFNorImageFileInfo *> * _Nonnull)imageFileInfos tryResume:(BOOL)tryResume responseFrequency:(uint8_t)responseFrequency;
/// 启动NorV1升级
/// \param targetDeviceIdentifier 目标设备的identifier字符串。通过CBPeripheral.identifier.uuidString获取
///
/// \param ctrlFilePath 与Image升级文件对应的control文件的本地路径。
///
/// \param imageFileInfos image文件信息列表。包含image文件本地路径以及image文件类型。
///
/// \param triggerMode 升级的触发模式。
///
/// \param 发送Image时，设备的回复频率。默认20（即SDK发送20包数据，设备进行一次回复），数值越大理论上速度越快，但超过设备的处理能力反而会因为重发而降低整体的发送速度，因此该值需要依据具体的设备性能而定。 
///
- (void)startOTANorV1WithTargetDeviceIdentifier:(NSString * _Nonnull)targetDeviceIdentifier ctrlFilePath:(NSURL * _Nonnull)ctrlFilePath imageFileInfos:(NSArray<SFNorImageFileInfo *> * _Nonnull)imageFileInfos triggerMode:(enum NorV1TriggerMode)triggerMode responseFrequency:(uint8_t)responseFrequency;
/// 终止升级流程
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SFOTAProgressStage : NSInteger;

SWIFT_PROTOCOL("_TtP18SifliOTAManagerSDK20SFOTAManagerDelegate_")
@protocol SFOTAManagerDelegate <NSObject>
/// 蓝牙状态改变回调。当state为poweredOn时才能启动升级，否则会启动失败。
/// state还可以通过manager的bleState属性来主动获取。
/// \param manager 管理器
///
/// \param state 新蓝牙状态
///
- (void)otaManagerWithManager:(SFOTAManager * _Nonnull)manager updateBleState:(CBManagerState)state;
/// 进度回调
/// \param manager 管理器
///
/// \param stage 当前所处的发送阶段
///
/// \param totalBytes 当前阶段总字节数
///
/// \param completedBytes 当前阶段已完成字节数
///
- (void)otaManagerWithManager:(SFOTAManager * _Nonnull)manager stage:(enum SFOTAProgressStage)stage totalBytes:(NSInteger)totalBytes completedBytes:(NSInteger)completedBytes;
/// OTA流程结束
/// \param manager 管理器
///
/// \param error nil-表示成功，否则表示失败
///
- (void)otaManagerWithManager:(SFOTAManager * _Nonnull)manager complete:(SFOTAError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, SFOTANorV1Mode, open) {
/// 普通模式
  SFOTANorV1ModeNormal = 0,
/// 强制启动
  SFOTANorV1ModeForce = 1,
/// 续传
  SFOTANorV1ModeResume = 2,
};

typedef SWIFT_ENUM(NSInteger, SFOTAProgressStage, open) {
  SFOTAProgressStageNand_res = 0,
  SFOTAProgressStageNand_image = 1,
  SFOTAProgressStageNor = 2,
};

/// OTA类型
typedef SWIFT_ENUM(NSInteger, SFOTAType, open) {
  SFOTATypeNone = 0,
  SFOTATypeNand = 1,
  SFOTATypeNorV2 = 2,
  SFOTATypeNorV1 = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef SIFLIOTAMANAGERSDK_SWIFT_H
#define SIFLIOTAMANAGERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SifliOTAManagerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, BleCoreManagerState, open) {
  BleCoreManagerStateUnknown = 0,
  BleCoreManagerStateResetting = 1,
  BleCoreManagerStateUnsupported = 2,
  BleCoreManagerStateUnauthorized = 3,
  BleCoreManagerStatePoweredOff = 4,
  BleCoreManagerStatePoweredOn = 5,
};




typedef SWIFT_ENUM(uint16_t, NandImageID, open) {
  NandImageIDHCPU = 0,
  NandImageIDLCPU = 1,
  NandImageIDPATCH = 2,
  NandImageIDRES = 3,
  NandImageIDLCPU_PATCH = 4,
  NandImageIDDYN = 5,
  NandImageIDMUSIC = 6,
};

typedef SWIFT_ENUM(uint8_t, NorImageID, open) {
  NorImageIDHCPU = 0,
  NorImageIDLCPU = 1,
  NorImageIDPATCH = 2,
  NorImageIDRES = 3,
  NorImageIDFONT_OR_MAX = 4,
  NorImageIDEX = 5,
  NorImageIDOTA_MANAGER = 6,
  NorImageIDTINY_FONT = 7,
  NorImageIDNONE = 0xff,
};

typedef SWIFT_ENUM(NSInteger, NorV1TriggerMode, open) {
/// 普通模式
  NorV1TriggerModeNormal = 0,
/// 强制启动
  NorV1TriggerModeForce = 1,
/// 续传
  NorV1TriggerModeResume = 2,
};

@class NSNumber;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK14QBleLogManager")
@interface QBleLogManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) QBleLogManager * _Nonnull share;)
+ (QBleLogManager * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
/// SDK内部日志开关。当关闭时，控制台不再打印内容，但QBleLogManagerDelegate的回调不受影响。
@property (nonatomic) BOOL openLog;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@class NSString;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK19SFNandImageFileInfo")
@interface SFNandImageFileInfo : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull path;
@property (nonatomic, readonly) enum NandImageID imageID;
- (nonnull instancetype)initWithPath:(NSURL * _Nonnull)path imageID:(enum NandImageID)imageID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SifliOTAManagerSDK18SFNorImageFileInfo")
@interface SFNorImageFileInfo : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull path;
@property (nonatomic, readonly) enum NorImageID imageID;
- (nonnull instancetype)initWithPath:(NSURL * _Nonnull)path imageID:(enum NorImageID)imageID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SFOTAErrorType : NSInteger;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK10SFOTAError")
@interface SFOTAError : NSObject
@property (nonatomic, readonly) enum SFOTAErrorType errorType;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorDes;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SFOTAErrorType, open) {
  SFOTAErrorTypeUnknown = 0,
  SFOTAErrorTypeConnectTimeout = 1,
  SFOTAErrorTypeConnectionCanceled = 2,
  SFOTAErrorTypeDisconnected = 3,
  SFOTAErrorTypeFailedToConnect = 4,
  SFOTAErrorTypeGeneral = 5,
  SFOTAErrorTypeSearchTimeout = 6,
  SFOTAErrorTypeRequestTimeout = 7,
  SFOTAErrorTypeLoadResourceZipFailed = 8,
  SFOTAErrorTypeLoadControlFileFailed = 9,
  SFOTAErrorTypeLoadImageFileFailed = 10,
  SFOTAErrorTypeErrorCodeFromDevice = 11,
  SFOTAErrorTypeInsufficientBytes = 12,
  SFOTAErrorTypeUnavailableBleStatus = 13,
  SFOTAErrorTypeInvalidParams = 14,
};


SWIFT_CLASS("_TtC18SifliOTAManagerSDK15SFOTALogManager")
@interface SFOTALogManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFOTALogManager * _Nonnull share;)
+ (SFOTALogManager * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL logEnable;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SFOTAManagerDelegate;
enum SFOTAType : NSInteger;

SWIFT_CLASS("_TtC18SifliOTAManagerSDK12SFOTAManager")
@interface SFOTAManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SDKVersion;)
+ (NSString * _Nonnull)SDKVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFOTAManager * _Nonnull share;)
+ (SFOTAManager * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <SFOTAManagerDelegate> _Nullable delegate;
/// 搜索目标外设时的超时时间(秒)，默认20秒
@property (nonatomic) NSInteger searchingTimeout;
- (void)logTest;
/// 当前蓝牙状态
@property (nonatomic, readonly) enum BleCoreManagerState bleState;
/// true-当前manager正在执行其它任务，开始新的OTA流程的行为会被忽略。false-处于空闲状态
@property (nonatomic, readonly) BOOL isBusy;
/// 当前正在执行的OTA类型。none表示当前没有OTA流程
@property (nonatomic, readonly) enum SFOTAType otaType;
/// 开启NAND升级
/// \param targetDeviceIdentifier 目标设备的identifier字符串。通过CBPeripheral.identifier.uuidString获取
///
/// \param resourceZipPath zip格式的资源文件本地路径。为nil表示本次升级不涉及资源文件
///
/// \param controlImageFilePath 与Image升级文件对应的control文件的本地路径。
///
/// \param imageFileInfos Image文件本地地址与类型信息。如果controlImageFilePath为nil则忽略该参数
///
/// \param tryResume 是否尝试启用续传功能。
///
/// \param 发送Image部分时，设备的回复频率。默认4（即SDK发送20包数据，设备进行一次回复），数值越大理论上速度越快，但超过设备的处理能力反而会因为重发而降低整体的发送速度，因此该值需要依据具体的设备性能而定。 
///
- (void)startOTANandWithTargetDeviceIdentifier:(NSString * _Nonnull)targetDeviceIdentifier resourceZipPath:(NSURL * _Nullable)resourceZipPath controlImageFilePath:(NSURL * _Nullable)controlImageFilePath imageFileInfos:(NSArray<SFNandImageFileInfo *> * _Nonnull)imageFileInfos tryResume:(BOOL)tryResume imageResponseFrequnecy:(uint8_t)imageResponseFrequnecy;
/// 开启NorV2升级
/// \param targetDeviceIdentifier 目标设备的identifier字符串。通过CBPeripheral.identifier.uuidString获取
///
/// \param controlImageFilePath 与Image升级文件对应的control文件的本地路径。
///
/// \param imageFileInfos image文件信息列表。包含image文件本地路径以及image文件类型。
///
/// \param tryResume 是否尝试启用续传功能。
///
/// \param 发送Image时，设备的回复频率。默认20（即SDK发送20包数据，设备进行一次回复），数值越大理论上速度越快，但超过设备的处理能力反而会因为重发而降低整体的发送速度，因此该值需要依据具体的设备性能而定。 
///
- (void)startOTANorV2WithTargetDeviceIdentifier:(NSString * _Nonnull)targetDeviceIdentifier controlImageFilePath:(NSURL * _Nonnull)controlImageFilePath imageFileInfos:(NSArray<SFNorImageFileInfo *> * _Nonnull)imageFileInfos tryResume:(BOOL)tryResume responseFrequency:(uint8_t)responseFrequency;
/// 启动NorV1升级
/// \param targetDeviceIdentifier 目标设备的identifier字符串。通过CBPeripheral.identifier.uuidString获取
///
/// \param ctrlFilePath 与Image升级文件对应的control文件的本地路径。
///
/// \param imageFileInfos image文件信息列表。包含image文件本地路径以及image文件类型。
///
/// \param triggerMode 升级的触发模式。
///
/// \param 发送Image时，设备的回复频率。默认20（即SDK发送20包数据，设备进行一次回复），数值越大理论上速度越快，但超过设备的处理能力反而会因为重发而降低整体的发送速度，因此该值需要依据具体的设备性能而定。 
///
- (void)startOTANorV1WithTargetDeviceIdentifier:(NSString * _Nonnull)targetDeviceIdentifier ctrlFilePath:(NSURL * _Nonnull)ctrlFilePath imageFileInfos:(NSArray<SFNorImageFileInfo *> * _Nonnull)imageFileInfos triggerMode:(enum NorV1TriggerMode)triggerMode responseFrequency:(uint8_t)responseFrequency;
/// 终止升级流程
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SFOTAProgressStage : NSInteger;

SWIFT_PROTOCOL("_TtP18SifliOTAManagerSDK20SFOTAManagerDelegate_")
@protocol SFOTAManagerDelegate <NSObject>
/// 蓝牙状态改变回调。当state为poweredOn时才能启动升级，否则会启动失败。
/// state还可以通过manager的bleState属性来主动获取。
/// \param manager 管理器
///
/// \param state 新蓝牙状态
///
- (void)otaManagerWithManager:(SFOTAManager * _Nonnull)manager updateBleState:(CBManagerState)state;
/// 进度回调
/// \param manager 管理器
///
/// \param stage 当前所处的发送阶段
///
/// \param totalBytes 当前阶段总字节数
///
/// \param completedBytes 当前阶段已完成字节数
///
- (void)otaManagerWithManager:(SFOTAManager * _Nonnull)manager stage:(enum SFOTAProgressStage)stage totalBytes:(NSInteger)totalBytes completedBytes:(NSInteger)completedBytes;
/// OTA流程结束
/// \param manager 管理器
///
/// \param error nil-表示成功，否则表示失败
///
- (void)otaManagerWithManager:(SFOTAManager * _Nonnull)manager complete:(SFOTAError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, SFOTANorV1Mode, open) {
/// 普通模式
  SFOTANorV1ModeNormal = 0,
/// 强制启动
  SFOTANorV1ModeForce = 1,
/// 续传
  SFOTANorV1ModeResume = 2,
};

typedef SWIFT_ENUM(NSInteger, SFOTAProgressStage, open) {
  SFOTAProgressStageNand_res = 0,
  SFOTAProgressStageNand_image = 1,
  SFOTAProgressStageNor = 2,
};

/// OTA类型
typedef SWIFT_ENUM(NSInteger, SFOTAType, open) {
  SFOTATypeNone = 0,
  SFOTATypeNand = 1,
  SFOTATypeNorV2 = 2,
  SFOTATypeNorV1 = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
